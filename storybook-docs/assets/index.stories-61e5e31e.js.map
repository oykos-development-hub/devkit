{"version":3,"file":"index.stories-61e5e31e.js","sources":["../../src/components/pin/styles/container.ts","../../src/components/pin/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  width: fit-content;\r\n  gap: 1em;\r\n\r\n  & > div {\r\n    width: 3em;\r\n    & input {\r\n      text-align: center;\r\n      height: 3em;\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { Input } from \"../input\";\r\nimport { Container } from \"./styles/container\";\r\n\r\nimport { IPinCode } from \"./types\";\r\n\r\nconst pinRefs: any = {};\r\nconst pinPrefix = \"pinRef-\";\r\nconst re = /^(\\d*\\.)?\\d+$/;\r\n\r\nexport const Pin = ({ handleInput, length = 4, type = \"password\" }: IPinCode) => {\r\n  const [value, setValue] = useState<string[]>([]);\r\n\r\n  value.forEach((e, i) => {\r\n    pinRefs[`${pinPrefix}${i}`] = React.createRef();\r\n  });\r\n\r\n  const checkKeyPress = useCallback(\r\n    (e: { key: any; keyCode: any }) => {\r\n      const { key, keyCode } = e;\r\n\r\n      // When user presses delete or backspace remove the latest value\r\n      if (keyCode === 8 || keyCode === 46) {\r\n        const filledValues = value.filter((filledValue) => !!filledValue);\r\n\r\n        filledValues.pop();\r\n\r\n        for (let i = filledValues.length; i < length; i++) {\r\n          filledValues.push(\"\");\r\n        }\r\n\r\n        setValue(filledValues);\r\n      }\r\n    },\r\n    [value],\r\n  );\r\n\r\n  const handleOnChange = (val: string, index: number) => {\r\n    if (re.test(val)) {\r\n      setValue((oldValue) => oldValue.map((e, i) => (i !== index ? e : val)));\r\n    }\r\n\r\n    // keep only the last value and override the previous\r\n    if (val?.length > 1) val = val[val.length - 1];\r\n\r\n    // When user pastes full pin value\r\n    // We want to fill out every pin input\r\n    if (val?.length === length && re.test(val)) {\r\n      return setValue(val.split(\"\"));\r\n    }\r\n  };\r\n\r\n  const handleFocus = () => {\r\n    const filledValues = value.filter((filledValue) => !!filledValue);\r\n\r\n    if (filledValues.length && pinRefs[`pinRef-${filledValues.length}`]) {\r\n      pinRefs[`pinRef-${filledValues.length}`].current?.focus();\r\n    } else pinRefs[\"pinRef-0\"].current?.focus();\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", checkKeyPress);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", checkKeyPress);\r\n    };\r\n  }, [checkKeyPress]);\r\n\r\n  useEffect(() => {\r\n    if (handleInput) {\r\n      handleInput(value.join(\"\"));\r\n    }\r\n\r\n    setTimeout(() => {\r\n      handleFocus();\r\n    }, 100);\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    const startValue = [];\r\n\r\n    if (length) {\r\n      for (let i = 0; i < length; i += 1) {\r\n        startValue.push(\"\");\r\n      }\r\n\r\n      setValue(startValue);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      {value.map((e, i) => (\r\n        <Input\r\n          type={type}\r\n          id={`${i}`}\r\n          key={i}\r\n          value={e}\r\n          onChange={(ev) => handleOnChange((ev.target as HTMLInputElement).value, i)}\r\n          disabled={(!!i && !value[i - 1]) || !!value[i + 1]}\r\n          maxLength={length}\r\n          inputRef={pinRefs[`${pinPrefix}${i}`]}\r\n          inputMode=\"numeric\"\r\n          pattern=\"[0-9]*\"\r\n        />\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n"],"names":["Container","styled","pinRefs","pinPrefix","re","Pin","__name","handleInput","type","value","setValue","useState","checkKeyPress","useCallback","key","keyCode","filledValues","filledValue","i","length","handleOnChange","val","index","handleFocus","useEffect","window","setTimeout","startValue","_jsxDEV","Input","e","_jsxFileName"],"mappings":"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"}