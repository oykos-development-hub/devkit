{"version":3,"file":"index.stories-33168db8.js","sources":["../../src/components/alert/types.ts","../../src/components/alert/styles/icon-content.tsx","../../src/components/alert/styles/content.tsx","../../src/components/alert/styles/container.ts","../../src/components/alert/index.tsx"],"sourcesContent":["import { DefaultTheme } from \"styled-components\";\nimport React from \"react\";\n\nexport enum AlertVariants {\n  primary = \"primary\",\n  error = \"error\",\n  success = \"success\",\n  info = \"info\",\n}\n\nexport enum AlertSizes {\n  xs = \"xs\",\n  sm = \"sm\",\n  md = \"md\",\n  lg = \"lg\",\n  xl = \"xl\",\n}\n\nexport interface AlertProps {\n  content?: React.ReactNode | string;\n  size?: AlertSizes;\n  variant: AlertVariants;\n  button?: JSX.Element | React.ReactNode;\n  className?: string;\n  closeIcon?: boolean;\n  additionalText?: string;\n  onClose?: (e?: React.MouseEvent<any>) => any;\n  children?: JSX.Element | React.ReactNode;\n  theme?: DefaultTheme;\n  style?: React.CSSProperties;\n}\n","import styled, { css } from \"styled-components\";\nimport { AlertProps, AlertSizes, AlertVariants } from \"../types\";\nimport React from \"react\";\nimport { CircleCheckIcon, DangerIcon, XIcon } from \"../../icon\";\nimport { ButtonSizes } from \"../../button/types\";\nimport { DefaultTheme } from \"../../../shared/theme/types\";\nimport { Theme } from \"../../../shared/theme\";\nimport { Typography } from \"../../typography\";\n\nconst StyledIconContent = styled.div`\n  display: flex;\n  align-self: stretch;\n  position: relative;\n  flex-direction: row;\n  align-items: flex-start;\n  padding: 0;\n  gap: 1rem;\n`;\n\nexport const LeftIconContent: React.FC<AlertProps> = ({ variant }) => {\n  const renderIcon = () => {\n    switch (variant) {\n      case \"success\":\n        return <CircleCheckIcon />;\n      case \"info\":\n      case \"primary\":\n      case \"error\":\n        return <DangerIcon />;\n      default:\n        return null;\n    }\n  };\n\n  return <StyledIconContent>{renderIcon()}</StyledIconContent>;\n};\n","import { AlertProps, AlertSizes, AlertVariants } from \"../types\";\nimport React from \"react\";\nimport { LeftIconContent } from \"./icon-content\";\nimport { XIcon } from \"../../icon\";\nimport { Typography } from \"../../typography\";\nimport styled, { css } from \"styled-components\";\nimport { DefaultTheme } from \"../../../shared/theme/types\";\n\nconst StyledContent = styled.div`\n  display: flex;\n  order: 0;\n  flex-direction: row;\n  padding: 0;\n  gap: 1rem;\n`;\n\nexport const Content = styled.div<{\n  variant: AlertVariants;\n  closeIcon?: boolean;\n  size?: AlertSizes;\n  onClose?: (e?: React.MouseEvent<any>) => any;\n  theme?: DefaultTheme;\n  style?: React.CSSProperties | undefined;\n}>(() => ({ style }) => {\n  return css`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    padding: 0;\n    gap: 1rem;\n\n    ${{ ...style }}\n  `;\n});\n\nexport const LeftContent: React.FC<AlertProps> = ({ content, variant = AlertVariants.success, size, style, theme }) => {\n  return (\n    <StyledContent>\n      <LeftIconContent variant={variant} size={size} />\n      <Typography variant={\"h6\"} content={content} theme={theme} style={style} />\n    </StyledContent>\n  );\n};\n\nexport const RightContent = styled.div<{\n  style?: React.CSSProperties | undefined;\n}>(() => ({ style }) => {\n  return css`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    padding: 0;\n    gap: 1rem;\n\n    & svg:hover {\n      cursor: pointer;\n    }\n\n    ${{ ...style }}\n  `;\n});\n","import React from \"react\";\nimport styled, { css, DefaultTheme } from \"styled-components\";\nimport { AlertSizes, AlertVariants } from \"../types\";\nimport { Theme } from \"../../../shared/theme\";\n\nexport const Container = styled.div<{\n  variant: AlertVariants;\n  size: AlertSizes | keyof typeof AlertSizes;\n  theme: DefaultTheme;\n  style: React.CSSProperties | undefined;\n}>(() => ({ theme, variant, size, style }) => {\n  const themeToUse = theme || Theme;\n  const { white, primary500, success500, error500, gray600 } = themeToUse.palette || {};\n\n  const background = {\n    primary: primary500,\n    success: success500,\n    error: error500,\n    info: gray600,\n  };\n\n  const padding = {\n    xs: \"0.5rem 0.875rem\",\n    sm: \"0.625rem 1rem\",\n    md: \"0.625rem 1.125rem\",\n    lg: \"0.75rem 1.25rem\",\n    xl: \"1rem 1.75rem\",\n  };\n\n  const textColor = {\n    primary: white,\n    success: white,\n    error: white,\n    info: white,\n  };\n\n  return css`\n    flex: none;\n    align-items: center;\n    max-width: 828px;\n    max-height: fit-content;\n    flex-grow: 1;\n    font-family: ${themeToUse.fontFamily?.one || \"sans-serif\"};\n    background-color: ${background[variant]};\n    color: ${style?.color || textColor[variant]} !important;\n    border-radius: 0.5rem;\n    padding: ${padding[size]};\n    gap: 0.75rem;\n    z-index: 999;\n\n    & p,\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6,\n    span,\n    label {\n      color: ${style?.color || textColor[variant]};\n    }\n\n    & svg path {\n      fill: ${style?.color || textColor[variant]} !important;\n      color: ${style?.color || textColor[variant]} !important;\n    }\n\n    ${{ ...style }}\n  `;\n});\n\nexport const Row = styled.div<{\n  size: AlertSizes;\n}>(() => ({ size }) => {\n  const padding = {\n    xs: \"0.5rem 0.875rem\",\n    sm: \"0.625rem 1rem\",\n    md: \"0.625rem 1.125rem\",\n    lg: \"0.75rem 1.25rem\",\n    xl: \"1rem 1.75rem\",\n  };\n\n  return css`\n    display: flex;\n    justify-content: space-between;\n    flex-direction: row;\n    align-content: flex-start;\n    order: 0;\n    flex-grow: 1;\n    word-wrap: break-word;\n    padding: ${padding[size]};\n  `;\n});\n","import React from \"react\";\nimport { AlertProps, AlertSizes, AlertVariants } from \"./types\";\nimport { LeftContent, RightContent } from \"./styles/content\";\nimport { Container, Row } from \"./styles/container\";\nimport { XIcon } from \"../icon\";\nimport { Typography } from \"../typography\";\n\nexport const Alert: React.FC<AlertProps> = ({\n  variant = AlertVariants.success,\n  content,\n  additionalText,\n  closeIcon = true,\n  onClose,\n  size = AlertSizes.xs,\n  style,\n  theme,\n}) => (\n  <Container variant={variant} size={size} style={style} theme={theme}>\n    <Row size={size}>\n      <LeftContent variant={variant} content={content} size={size} style={style} theme={theme} />\n\n      {closeIcon && (\n        <RightContent style={style}>\n          <XIcon onClick={onClose} />\n        </RightContent>\n      )}\n    </Row>\n\n    {additionalText && (\n      <Row size={size}>\n        <Typography variant={\"p\"} content={additionalText} />\n      </Row>\n    )}\n  </Container>\n);\n"],"names":["AlertVariants","AlertSizes","StyledIconContent","styled","LeftIconContent","__name","variant","_jsx","CircleCheckIcon","DangerIcon","StyledContent","Content","style","css","LeftContent","content","success","size","_jsxs","Typography","theme","RightContent","Container","themeToUse","Theme","white","primary500","success500","error500","gray600","background","padding","textColor","_a","Row","Alert","additionalText","onClose","xs","closeIcon","XIcon"],"mappings":"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"}