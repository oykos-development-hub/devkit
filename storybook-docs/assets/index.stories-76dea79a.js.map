{"version":3,"file":"index.stories-76dea79a.js","sources":["../../src/components/pin/styles.ts","../../src/components/pin/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledMainWrapper = styled.div`\n  display: flex;\n  width: fit-content;\n  gap: 1em;\n\n  & > div {\n    width: 3em;\n    & input {\n      text-align: center;\n      height: 3em;\n    }\n  }\n`;\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { Input } from \"../input\";\nimport { StyledMainWrapper } from \"./styles\";\n\nimport { IPinCode } from \"./types\";\nimport { InputTypes } from \"../input/types\";\n\nconst pinRefs: any = {};\nconst pinPrefix = \"pinRef-\";\nconst re = /^(\\d*\\.)?\\d+$/;\n\nexport const Pin = ({ handleInput, length = 4, type = InputTypes[\"number\"], variant }: IPinCode) => {\n  const [value, setValue] = useState<string[]>([]);\n\n  value.forEach((e, i) => {\n    pinRefs[`${pinPrefix}${i}`] = React.createRef();\n  });\n\n  const checkKeyPress = useCallback(\n    (e: { key: any; keyCode: any }) => {\n      const { key, keyCode } = e;\n\n      // When user presses delete or backspace remove the latest value\n      if (keyCode === 8 || keyCode === 46) {\n        const filledValues = value.filter((filledValue) => !!filledValue);\n\n        filledValues.pop();\n\n        for (let i = filledValues.length; i < length; i++) {\n          filledValues.push(\"\");\n        }\n\n        setValue(filledValues);\n      }\n    },\n    [value],\n  );\n\n  const handleOnChange = (val: string, index: number) => {\n    if (re.test(val)) {\n      setValue((oldValue) => oldValue.map((e, i) => (i !== index ? e : val)));\n    }\n\n    // keep only the last value and override the previous\n    if (val?.length > 1) val = val[val.length - 1];\n\n    // When user pastes full pin value\n    // We want to fill out every pin input\n    if (val?.length === length && re.test(val)) {\n      return setValue(val.split(\"\"));\n    }\n  };\n\n  const handleFocus = () => {\n    const filledValues = value.filter((filledValue) => !!filledValue);\n\n    if (filledValues.length && pinRefs[`pinRef-${filledValues.length}`]) {\n      pinRefs[`pinRef-${filledValues.length}`].current?.focus();\n    } else pinRefs[\"pinRef-0\"].current?.focus();\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", checkKeyPress);\n\n    return () => {\n      window.removeEventListener(\"keydown\", checkKeyPress);\n    };\n  }, [checkKeyPress]);\n\n  useEffect(() => {\n    if (handleInput) {\n      handleInput(value.join(\"\"));\n    }\n\n    setTimeout(() => {\n      handleFocus();\n    }, 100);\n  }, [value]);\n\n  useEffect(() => {\n    const startValue = [];\n\n    if (length) {\n      for (let i = 0; i < length; i += 1) {\n        startValue.push(\"\");\n      }\n\n      setValue(startValue);\n    }\n  }, []);\n\n  return (\n    <StyledMainWrapper>\n      {value.map((e, i) => (\n        <Input\n          variant={variant}\n          type={type}\n          id={`${i}`}\n          key={i}\n          value={e}\n          onChange={(ev: any) => handleOnChange((ev.target as HTMLInputElement).value, i)}\n          disabled={(!!i && !value[i - 1]) || !!value[i + 1]}\n          maxLength={length}\n          inputRef={pinRefs[`${pinPrefix}${i}`]}\n          pattern=\"[0-9]*\"\n        />\n      ))}\n    </StyledMainWrapper>\n  );\n};\n"],"names":["StyledMainWrapper","styled","pinRefs","pinPrefix","re","Pin","__name","handleInput","type","InputTypes","variant","value","setValue","useState","checkKeyPress","useCallback","key","keyCode","filledValues","filledValue","i","length","handleOnChange","val","index","handleFocus","useEffect","window","setTimeout","startValue","_jsx","Input","e"],"mappings":"0WAEO,MAAMA,EAAoBC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECKxCC,EAAA,CAAA,EACAC,EAAA,UACAC,EAAA,gBAEOC,EAAAC,EAAA,CAAA,CAAa,YAAAC,EAAEA,OAAAA,EAAAA,EAAsB,KAAAC,EAAAC,EAAA,OAAqB,QAAAC,CAA6B,IAAA,CAC5F,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,CAAA,CAAA,EAEAF,EAAAA,QAAAA,CAAAA,EAAAA,IAAAA,CACET,EAAAA,GAAAA,IAAAA,KAAAA,EAAAA,WAA+C,CAAA,EAGjD,MAAAY,EAAAC,cAAA,GAAA,CAEI,KAAA,CAAM,IAAAC,EAAEA,QAAAA,CAAKC,EAAAA,EAGb,GAAAA,IAAA,GAAAA,IAAA,GAAA,CACE,MAAAC,EAAAP,EAAA,OAAAQ,GAAA,CAAA,CAAAA,CAAA,EAEAD,EAAAA,IAAAA,EAEA,QAAAE,EAAAF,EAAA,OAAAE,EAAAC,EAAAD,IACEF,EAAAA,KAAAA,EAAAA,EAGFN,EAAAA,CAAAA,CAAqB,CACvB,EAAA,CAAAD,CAAA,CAAA,EAKJW,EAAAhB,EAAA,CAAAiB,EAAAC,IAAA,CAUE,GATApB,EAAA,KAAAmB,CAAA,GACEX,EAAAA,GAAAA,EAAAA,IAAAA,CAAAA,EAAAA,IAAAA,IAAAA,EAAAA,EAAAA,CAAAA,CAAAA,GAIFW,GAAA,YAAAA,EAAA,QAAA,IAAqBA,EAAAA,EAAAA,EAAAA,OAAAA,KAIrBA,GAAA,YAAAA,EAAA,UAAAF,GAAAjB,EAAA,KAAAmB,CAAA,EACE,OAAAX,EAAAW,EAAA,MAAA,EAAA,CAAA,CACF,EAZF,kBAeAE,EAAAnB,EAAA,IAAA,SACE,MAAAY,EAAAP,EAAA,OAAAQ,GAAA,CAAA,CAAAA,CAAA,EAEAD,EAAA,QAAAhB,EAAA,UAAAgB,EAAA,WACEhB,EAAAA,EAAAA,UAAAA,EAAAA,UAAAA,UAAAA,MAAAA,EAAAA,SACKA,EAAAA,EAAAA,YAAAA,UAAAA,MAAAA,EAAAA,OAAoC,EAL7C,eAQAwB,OAAAA,EAAAA,UAAAA,KACEC,OAAAA,iBAAAA,UAAAA,CAAAA,EAEA,IAAA,CACEA,OAAAA,oBAAAA,UAAAA,CAAAA,CAAmD,GACrD,CAAAb,CAAA,CAAA,EAGFY,EAAAA,UAAAA,IAAAA,CACEnB,GACEA,EAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAGFqB,WAAAA,IAAAA,CACEH,GAAa,EAAA,GAAA,CACT,EAAA,CAAAd,CAAA,CAAA,EAGRe,EAAAA,UAAAA,IAAAA,CACE,MAAAG,EAAA,CAAA,EAEA,GAAAR,EAAA,CACE,QAAAD,EAAA,EAAAA,EAAAC,EAAAD,GAAA,EACES,EAAAA,KAAAA,EAAAA,EAGFjB,EAAAA,CAAAA,CAAmB,CACrB,EAAA,CAAA,CAAA,EAGFkB,EAAA9B,EAAA,CACoB,SAAAW,EAAA,IAAA,CAAA,EAAAS,IAAAU,EAAAC,EAAA,CAER,QAAArB,EACJ,KAAAF,EACA,GAAA,GAAAY,IACOA,MAAAA,EAEAY,SAAAA,GAAAA,EAAAA,EAAAA,OAAAA,MAAAA,CAAAA,EACuE,SAAA,CAAA,CAAAZ,GAAA,CAAAT,EAAAS,EAAA,IAAA,CAAA,CAAAT,EAAAS,EAAA,GAC9B,UAAAC,EACrCA,SAAAA,EAAAA,GAAAA,IAAAA,KACsBD,QAAAA,QACzB,EAAAA,CAAA,CAAA,CAEX,CAAA,CAGP,EAlGO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}